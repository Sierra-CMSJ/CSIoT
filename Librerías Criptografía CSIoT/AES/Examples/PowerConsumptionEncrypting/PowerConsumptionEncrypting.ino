#include <AES.h>

AES aes;

const unsigned long interval_us = 2000;   // Intervalo en microsegundos

int keySize = 16;         //Cambiar el tamaño segun el tamaño de la clave que se vaya a usar

// Clave de ejemplo
uint8_t exampleKey[16] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
//uint8_t exampleKey[24] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18};
//uint8_t exampleKey[32] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20};

uint8_t expandedKey[176];
//uint8_t expandedKey[208];
//uint8_t expandedKey[240];

// Vector de inicialización
/*
uint8_t iv[16] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
*/

// Texto plano de ejemplo
const int plainTextSize = 256;         //Cambiar el tamaño segun el tamaño de texto plano que se quiera evaluar (16, 64, 128)

/*
uint8_t plainText[plainTextSize] = {
0x41, 0x50, 0x56, 0x43, 0x4D, 0x53, 0x4A, 0x32, 0x30, 0x32, 0x34, 0x49, 0x4F, 0x54, 0x54, 0x47                              //Cambiar plainTextSize = 16;  
};
*/

/*
uint8_t plainText[plainTextSize] = {                                                                                      
0x9F, 0xF2, 0x62, 0x4B, 0xA6, 0x17, 0xEA, 0x8E, 0xB1, 0x78, 0x78, 0x21, 0x9F, 0x25, 0x44, 0x23,                             //Cambiar plainTextSize = 64;  
0x44, 0x3A, 0xEE, 0x59, 0x4F, 0x62, 0x1B, 0x9D, 0x85, 0xB3, 0xF8, 0x91, 0x72, 0xDE, 0x56, 0x84, 
0xA0, 0xE2, 0xF6, 0x6F, 0x5C, 0xC9, 0x38, 0x20, 0x41, 0x99, 0xEC, 0x2F, 0xAB, 0xBF, 0xA9, 0x6E, 
0x06, 0x35, 0x2F, 0xF5, 0x17, 0xAB, 0x4E, 0x45, 0x3C, 0x2E, 0x38, 0x1B, 0xEF, 0x34, 0x34, 0x79
};
*/

/*
uint8_t plainText[plainTextSize] = {  
0xC5, 0xB0, 0xE7, 0xAE, 0xAB, 0x5A, 0x9A, 0x1C, 0xB3, 0xF2, 0x81, 0x2A, 0x15, 0xAB, 0xD0, 0xE2,                             //Cambiar plainTextSize = 128;
0x99, 0x3F, 0x04, 0x2F, 0xE6, 0x33, 0xFF, 0xB8, 0x31, 0xF6, 0x12, 0xDE, 0x02, 0x22, 0x88, 0x68, 
0x81, 0xA9, 0xD9, 0x18, 0xC4, 0x59, 0x3C, 0x19, 0x48, 0x5D, 0xA0, 0x7C, 0x8F, 0x8C, 0x18, 0x92, 
0x5F, 0xF6, 0xEE, 0xB9, 0x84, 0x08, 0xBE, 0xD1, 0xEE, 0x65, 0xB3, 0x2B, 0x85, 0x3C, 0xF3, 0xA2, 
0x6E, 0xAA, 0x35, 0xE6, 0xAA, 0xF6, 0xD9, 0x17, 0x70, 0x7C, 0xA0, 0x06, 0x4C, 0x82, 0x78, 0xAF, 
0xDC, 0x25, 0x14, 0x49, 0x73, 0x0C, 0xFC, 0xCF, 0x0A, 0x66, 0x65, 0xB6, 0x50, 0x8B, 0x62, 0xDB, 
0x49, 0xD4, 0x40, 0xC0, 0x2B, 0x4C, 0xD3, 0x10, 0x55, 0xF4, 0x2F, 0xF1, 0xA1, 0xCA, 0x51, 0xFF, 
0xF8, 0x90, 0x9C, 0x54, 0x35, 0x43, 0xE0, 0x73, 0xE2, 0x16, 0xB4, 0x39, 0x33, 0xE7, 0xF3, 0x90, 
};
*/


uint8_t plainText[plainTextSize] = {  
0xC5, 0xB0, 0xE7, 0xAE, 0xAB, 0x5A, 0x9A, 0x1C, 0xB3, 0xF2, 0x81, 0x2A, 0x15, 0xAB, 0xD0, 0xE2,                             //Cambiar plainTextSize = 256;
0x99, 0x3F, 0x04, 0x2F, 0xE6, 0x33, 0xFF, 0xB8, 0x31, 0xF6, 0x12, 0xDE, 0x02, 0x22, 0x88, 0x68, 
0x81, 0xA9, 0xD9, 0x18, 0xC4, 0x59, 0x3C, 0x19, 0x48, 0x5D, 0xA0, 0x7C, 0x8F, 0x8C, 0x18, 0x92, 
0x5F, 0xF6, 0xEE, 0xB9, 0x84, 0x08, 0xBE, 0xD1, 0xEE, 0x65, 0xB3, 0x2B, 0x85, 0x3C, 0xF3, 0xA2, 
0x6E, 0xAA, 0x35, 0xE6, 0xAA, 0xF6, 0xD9, 0x17, 0x70, 0x7C, 0xA0, 0x06, 0x4C, 0x82, 0x78, 0xAF, 
0xDC, 0x25, 0x14, 0x49, 0x73, 0x0C, 0xFC, 0xCF, 0x0A, 0x66, 0x65, 0xB6, 0x50, 0x8B, 0x62, 0xDB, 
0x49, 0xD4, 0x40, 0xC0, 0x2B, 0x4C, 0xD3, 0x10, 0x55, 0xF4, 0x2F, 0xF1, 0xA1, 0xCA, 0x51, 0xFF, 
0xF8, 0x90, 0x9C, 0x54, 0x35, 0x43, 0xE0, 0x73, 0xE2, 0x16, 0xB4, 0x39, 0x33, 0xE7, 0xF3, 0x90,
0xC5, 0xB0, 0xE7, 0xAE, 0xAB, 0x5A, 0x9A, 0x1C, 0xB3, 0xF2, 0x81, 0x2A, 0x15, 0xAB, 0xD0, 0xE2,                             
0x99, 0x3F, 0x04, 0x2F, 0xE6, 0x33, 0xFF, 0xB8, 0x31, 0xF6, 0x12, 0xDE, 0x02, 0x22, 0x88, 0x68, 
0x81, 0xA9, 0xD9, 0x18, 0xC4, 0x59, 0x3C, 0x19, 0x48, 0x5D, 0xA0, 0x7C, 0x8F, 0x8C, 0x18, 0x92, 
0x5F, 0xF6, 0xEE, 0xB9, 0x84, 0x08, 0xBE, 0xD1, 0xEE, 0x65, 0xB3, 0x2B, 0x85, 0x3C, 0xF3, 0xA2, 
0x6E, 0xAA, 0x35, 0xE6, 0xAA, 0xF6, 0xD9, 0x17, 0x70, 0x7C, 0xA0, 0x06, 0x4C, 0x82, 0x78, 0xAF, 
0xDC, 0x25, 0x14, 0x49, 0x73, 0x0C, 0xFC, 0xCF, 0x0A, 0x66, 0x65, 0xB6, 0x50, 0x8B, 0x62, 0xDB, 
0x49, 0xD4, 0x40, 0xC0, 0x2B, 0x4C, 0xD3, 0x10, 0x55, 0xF4, 0x2F, 0xF1, 0xA1, 0xCA, 0x51, 0xFF, 
0xF8, 0x90, 0x9C, 0x54, 0x35, 0x43, 0xE0, 0x73, 0xE2, 0x16, 0xB4, 0x39, 0x33, 0xE7, 0xF3, 0x90
};


uint8_t cipherText[plainTextSize];

void setup() {
  //while(!Serial){}
  Serial.begin(115200);
  aes.keyExpansion(exampleKey, keySize, expandedKey);
}

void loop() {  
  // Reiniciar IV en cada iteración
  uint8_t iv_copy[16];
  memcpy(iv_copy, iv, 16);

  // Cifrado en modo CBC
  aes.encryptCBC(plainText, plainTextSize, expandedKey, keySize, iv_copy, cipherText);

  /*
  // Mostrar el texto cifrado
  Serial.println("Cipher Text (CBC):");
  for (int i = 0; i < plainTextSize; i++) {
    Serial.print("0x");
    if (cipherText[i] < 0x10) {
      Serial.print("0");
    }
    Serial.print(cipherText[i], HEX);
    Serial.print(" ");
    if ((i + 1) % 16 == 0) {
      Serial.println();
    }
  }
  Serial.println();

  // Mostrar el texto cifrado
  Serial.println("Cipher Text (CBC):");
  for (int i = 0; i < plainTextSize; i++) {
    if (cipherText[i] < 0x10) {
      Serial.print("0");
    }
    Serial.print(cipherText[i], HEX);
    if ((i + 1) % 16 == 0) {
      Serial.println();
    }
  }
  Serial.println();
  */
  
  

  // Espera fija de en µs
  delayMicroseconds(interval_us);
}