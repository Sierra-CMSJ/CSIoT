#include <AES.h>

AES aes;

int keySize = 32;         //Cambiar el tamaño segun el tamaño de la clave que se vaya a usar

// Clave de ejemplo
//uint8_t exampleKey[16] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
//uint8_t exampleKey[24] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18};
uint8_t exampleKey[32] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20};

//uint8_t expandedKey[176];
//uint8_t expandedKey[208];
uint8_t expandedKey[240];

// Vector de inicialización
uint8_t iv[16] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};

// Texto plano de ejemplo
const int plainTextSize = 16;         //Cambiar el tamaño segun el tamaño de texto plano que se quiera evaluar (16, 64, 128)

//uint8_t cipherText[plainTextSize] = {0x8B, 0xCD, 0x31, 0x5F, 0x34, 0xA5, 0x39, 0xA5, 0x48, 0x26, 0x75, 0x4E, 0x01, 0xCC, 0x61, 0x23};    //Clave de 16 Texto plano 16
//uint8_t cipherText[plainTextSize] = {0x93, 0x73, 0xD1, 0xB6, 0x6A, 0xF8, 0x9B, 0x92, 0x59, 0x06, 0x51, 0x39, 0x57, 0xD6, 0x35, 0xD7};    //Clave de 24 Texto plano 16
uint8_t cipherText[plainTextSize] = {0x48, 0x2D, 0xE1, 0x55, 0xFB, 0x5D, 0x33, 0xD6, 0xE6, 0xD2, 0xD9, 0x34, 0x3D, 0xD5, 0xE9, 0x74};    //Clave de 32 Texto plano 16

/*
uint8_t cipherText[plainTextSize] = {                                                                                                      //Clave de 16 Texto plano 64
0x6C, 0x02, 0xD6, 0xCB, 0xD2, 0x2D, 0xD0, 0x89, 0x4A, 0x16, 0x6C, 0x63, 0x83, 0x4B, 0xEA, 0x9F,                                             
0xD7, 0x90, 0xDC, 0x14, 0x72, 0xC4, 0xCB, 0x1A, 0x92, 0xB4, 0xF4, 0xA7, 0x3A, 0xC4, 0x3D, 0xF6, 
0x03, 0x5A, 0xEF, 0x5A, 0x53, 0xEC, 0x5F, 0x90, 0xFC, 0xF1, 0x16, 0xB9, 0x9B, 0xE1, 0xE8, 0x64, 
0x3E, 0x88, 0x8F, 0x89, 0x76, 0x7B, 0x1E, 0x55, 0x5D, 0xC6, 0x96, 0x3E, 0x18, 0x78, 0xE7, 0x93
};
*/

/*
uint8_t cipherText[plainTextSize] = {                                                                                                      //Clave de 24 Texto plano 64
0x7B, 0x19, 0xBF, 0x54, 0x30, 0xDE, 0x1A, 0xBD, 0xB3, 0xDE, 0x28, 0xCD, 0xF4, 0x83, 0x40, 0x61,                                             
0xF7, 0x3D, 0x65, 0xA4, 0xEB, 0xE0, 0xEA, 0x37, 0xEB, 0x8B, 0xD3, 0x96, 0x80, 0x48, 0x52, 0x28, 
0x8B, 0xCE, 0x9E, 0x28, 0xE7, 0x20, 0xAB, 0x98, 0x60, 0x10, 0xAE, 0xBC, 0x08, 0xB3, 0x1B, 0xE7, 
0xC7, 0x0D, 0x1A, 0xD8, 0x35, 0xB4, 0xAF, 0xA3, 0x47, 0x56, 0x29, 0x9E, 0xA7, 0x63, 0xEB, 0x98
};
*/

/*
uint8_t cipherText[plainTextSize] = {                                                                                                      //Clave de 32 Texto plano 64
0x5A, 0xC1, 0xF7, 0x52, 0x19, 0xBA, 0xA0, 0x2A, 0xD0, 0x74, 0x31, 0xB1, 0xC2, 0x5C, 0xCD, 0xC6,                                             
0x3F, 0xE8, 0x18, 0xD9, 0x4A, 0x79, 0xDE, 0x62, 0xB5, 0x76, 0xB3, 0x93, 0x68, 0x03, 0x4B, 0xAA, 
0xDE, 0x10, 0x1B, 0xED, 0xB0, 0x7E, 0x61, 0x53, 0xA1, 0xE5, 0x6B, 0x29, 0xE1, 0xE8, 0x78, 0xBA, 
0x05, 0x2A, 0x83, 0x96, 0x02, 0xE7, 0x15, 0x8F, 0x69, 0xBD, 0x3D, 0x49, 0xC6, 0xDD, 0xAC, 0xA7
};
*/

/*
uint8_t cipherText[plainTextSize] = {                                                                                                      //Clave de 16 Texto plano 128
0x02, 0xE7, 0x87, 0x22, 0xDF, 0xB2, 0x00, 0x1D, 0xAE, 0x8F, 0x47, 0x79, 0xD1, 0xAC, 0x12, 0x24, 
0xE9, 0xA0, 0x82, 0xAD, 0xF0, 0xEB, 0x8F, 0x6B, 0xBF, 0x65, 0x32, 0xBB, 0xAE, 0x1F, 0x7A, 0xD5, 
0x10, 0x85, 0x31, 0x92, 0x72, 0x71, 0xF8, 0x1C, 0x16, 0xC8, 0x67, 0x5D, 0x7D, 0x73, 0xF0, 0xE4, 
0xAE, 0xC7, 0x99, 0xBA, 0x0C, 0xCE, 0x90, 0x22, 0xB1, 0x3E, 0xCD, 0x56, 0x25, 0xBD, 0x4D, 0xD9, 
0x5D, 0x7F, 0x3A, 0xE0, 0xFE, 0x26, 0x13, 0x72, 0x72, 0xCA, 0x88, 0x45, 0x84, 0xDE, 0xE8, 0x39, 
0x46, 0xA8, 0x26, 0xFC, 0x81, 0xCD, 0x9A, 0xD8, 0x42, 0xDA, 0x5A, 0x98, 0xDD, 0x25, 0xC3, 0xEF, 
0xA8, 0x6C, 0xE5, 0x9C, 0x79, 0x75, 0xE8, 0x3D, 0x1F, 0xF8, 0x4C, 0xF4, 0x3A, 0x84, 0xAC, 0x74, 
0x78, 0x35, 0x01, 0xB0, 0x96, 0xA1, 0xFD, 0x07, 0x7A, 0x91, 0x84, 0xF1, 0x82, 0x84, 0x08, 0x56, 
};
*/

/*
uint8_t cipherText[plainTextSize] = {                                                                                                      //Clave de 24 Texto plano 128
0xCD, 0x86, 0x19, 0xFF, 0x1F, 0x69, 0x20, 0x54, 0x1F, 0xE5, 0xDA, 0x2F, 0xF0, 0xEB, 0x7C, 0x47, 
0xF4, 0x86, 0xFF, 0x8F, 0xBA, 0x21, 0xFE, 0x77, 0x9F, 0x48, 0xC6, 0x01, 0xFD, 0xCC, 0x1C, 0xB7, 
0x43, 0x48, 0x9E, 0x17, 0x8F, 0xFD, 0xE9, 0x41, 0x06, 0xCA, 0xC2, 0x37, 0x4F, 0x81, 0x0D, 0x37, 
0xA9, 0xE7, 0x88, 0xFE, 0x50, 0x7C, 0x64, 0x12, 0x55, 0xD2, 0x94, 0x76, 0x74, 0xFF, 0x62, 0x26, 
0xAB, 0xBD, 0x44, 0x3F, 0x28, 0xEE, 0x32, 0x37, 0x72, 0xD2, 0x6E, 0xDD, 0xF2, 0xF5, 0x98, 0x78, 
0x45, 0x60, 0x05, 0x99, 0x54, 0x6D, 0x0A, 0xB0, 0x2A, 0xE3, 0x77, 0x92, 0x71, 0x8A, 0x04, 0x0D, 
0xEB, 0x6E, 0x25, 0xB6, 0x69, 0xBC, 0xA7, 0x7A, 0x03, 0xDF, 0xFA, 0xE9, 0x36, 0xDB, 0x83, 0xD8, 
0x91, 0x52, 0x9E, 0xE7, 0x7F, 0x7B, 0x3D, 0x1D, 0xDA, 0x1E, 0xCF, 0xA3, 0x3B, 0xFF, 0xF8, 0x9E,
};
*/

/*
uint8_t cipherText[plainTextSize] = {                                                                                                      //Clave de 32 Texto plano 128
0x09, 0x9A, 0xC1, 0x18, 0x92, 0xBB, 0x66, 0x72, 0x9E, 0xD5, 0xC8, 0x71, 0x67, 0x7F, 0x0E, 0xBA, 
0x0B, 0x2B, 0xB3, 0x44, 0x4D, 0xE1, 0x8F, 0x2C, 0x15, 0x2A, 0x38, 0x86, 0x4A, 0xE0, 0x64, 0x76, 
0x3E, 0xB7, 0x87, 0x18, 0x4B, 0x86, 0x9B, 0xA0, 0x87, 0x12, 0x01, 0xEB, 0x6A, 0x4E, 0xCE, 0x25, 
0xE5, 0xEE, 0xE2, 0x86, 0xBF, 0x9B, 0xB9, 0x99, 0x57, 0x69, 0x77, 0x6E, 0x07, 0x63, 0x14, 0x32, 
0x28, 0xB6, 0x85, 0x6E, 0x79, 0x72, 0x49, 0xDF, 0x82, 0x71, 0x5B, 0x0D, 0x59, 0xA5, 0x9B, 0xE0, 
0x94, 0xA0, 0x33, 0x62, 0x2E, 0xF0, 0x85, 0xB7, 0x6F, 0x71, 0x53, 0x2B, 0x1E, 0xE4, 0x89, 0x25, 
0xB1, 0x5E, 0x74, 0x15, 0xED, 0x74, 0x52, 0x8D, 0x2C, 0x52, 0xAF, 0x82, 0x6F, 0xDE, 0xFA, 0xA4, 
0xEC, 0xE9, 0xB9, 0xE2, 0x2D, 0xDF, 0xB4, 0xFF, 0x0F, 0xC6, 0xE6, 0x4E, 0xBF, 0xC7, 0xDF, 0x8B, 
};
*/

void setup() {
  //while(!Serial){}
  Serial.begin(115200);

  aes.keyExpansion(exampleKey, keySize, expandedKey);

  // Descifrado en modo CBC
  uint8_t decryptedText[plainTextSize];
  aes.decryptCBC(cipherText, plainTextSize, expandedKey, keySize, iv, decryptedText);

  /*
  // Mostrar el texto descifrado
  Serial.println("Decrypted Text:");
  for (int i = 0; i < plainTextSize; i++) {
    Serial.print("0x");
    if (decryptedText[i] < 0x10) {
      Serial.print("0");
    }
    Serial.print(decryptedText[i], HEX);
    Serial.print(" ");
    if ((i + 1) % 16 == 0) {
      Serial.println();
    }
  }
  Serial.println();

  // Mostrar el texto descifrado
  Serial.println("Decrypted Text:");
  for (int i = 0; i < plainTextSize; i++) {
    if (decryptedText[i] < 0x10) {
      Serial.print("0");
    }
    Serial.print(decryptedText[i], HEX);
    if ((i + 1) % 16 == 0) {
      Serial.println();
    }
  }
  Serial.println();
  */

}

void loop() {
  // put your main code here, to run repeatedly:
}