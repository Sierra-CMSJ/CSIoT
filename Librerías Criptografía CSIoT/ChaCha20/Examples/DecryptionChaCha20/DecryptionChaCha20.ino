#include <ChaCha20.h>

const size_t plainTextSize = 16;  // Definir tamaño explícitamente

// Definición de la clave, nonce y contador
uint8_t key[32] = {0x2D, 0xCF, 0x46, 0x29, 0x04, 0xB4, 0x78, 0xD8, 0x68, 0xA7, 0xFF, 0x3F, 0x2B, 0xF1, 0xFC, 0xD9, 0x7A, 0x96, 0x09, 0x2C, 0xA5, 0x57, 0x74, 0x64, 0xC4, 0xAF, 0x15, 0x28, 0xA4, 0xE9, 0x57, 0xDB};
uint8_t nonce[12] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
uint32_t counter = 0;


uint8_t cipherText[plainTextSize] = {
0x1B, 0x5A, 0x5F, 0x12, 0x31, 0xF1, 0xF4, 0x89, 0xC0, 0xE7, 0x2F, 0x41, 0x0A, 0x20, 0xA4, 0x5D                            //Cambiar plainTextSize = 16;  
};


/*
uint8_t cipherText[plainTextSize] = {                                                                                      
0xC5, 0xF8, 0x6B, 0x1A, 0xDA, 0xB5, 0x54, 0x35, 0x41, 0xAD, 0x63, 0x29, 0xDA, 0x51, 0xB4, 0x39, 
0x36, 0x22, 0x08, 0xB6, 0x49, 0x1A, 0xF2, 0x15, 0xCA, 0xD0, 0x59, 0xA4, 0x6E, 0x78, 0x67, 0x81, 
0x46, 0xC7, 0x6B, 0xD0, 0x74, 0x55, 0x2E, 0x36, 0xB8, 0xEF, 0x3B, 0xE6, 0x44, 0x95, 0x29, 0x8A, 
0xE1, 0x73, 0xDC, 0xF5, 0x48, 0xB6, 0x53, 0xBF, 0x62, 0xA3, 0xBF, 0x02, 0x19, 0x7B, 0x24, 0x27
};
*/

/*
uint8_t cipherText[plainTextSize] = {  
0x9F, 0xBA, 0xEE, 0xFF, 0xD7, 0xF8, 0x24, 0xA7, 0x43, 0x27, 0x9A, 0x22, 0x50, 0xDF, 0x20, 0xF8, 
0xEB, 0x27, 0xE2, 0xC0, 0xE0, 0x4B, 0x16, 0x30, 0x7E, 0x95, 0xB3, 0xEB, 0x1E, 0x84, 0xB9, 0x6D, 
0x67, 0x8C, 0x44, 0xA7, 0xEC, 0xC5, 0x2A, 0x0F, 0xB1, 0x2B, 0x77, 0xB5, 0x60, 0xA6, 0x98, 0x76, 
0xB8, 0xB0, 0x1D, 0xB9, 0xDB, 0x15, 0xA3, 0x2B, 0xB0, 0xE8, 0x34, 0x32, 0x73, 0x73, 0xE3, 0xFC, 
0xEE, 0x77, 0x1E, 0x0B, 0x11, 0x27, 0xEC, 0x20, 0x9E, 0x46, 0x58, 0x89, 0x28, 0x22, 0x22, 0xAD, 
0x42, 0xD3, 0x30, 0xE2, 0x8F, 0x81, 0xB6, 0xA2, 0xA0, 0xB8, 0x33, 0x1E, 0xEA, 0x7F, 0x23, 0x08, 
0x52, 0x1C, 0xB2, 0x50, 0xCE, 0xFE, 0x9E, 0x24, 0x6F, 0xBF, 0x15, 0x84, 0xF1, 0xA6, 0xFC, 0xA7, 
0xDA, 0x63, 0x90, 0x9D, 0x72, 0x6B, 0xB2, 0xE8, 0x0E, 0xDF, 0x79, 0x0B, 0x69, 0xF3, 0x70, 0x1C, 
};
*/

/*
uint8_t cipherText[plainTextSize] = {  
0x9F, 0xBA, 0xEE, 0xFF, 0xD7, 0xF8, 0x24, 0xA7, 0x43, 0x27, 0x9A, 0x22, 0x50, 0xDF, 0x20, 0xF8, 
0xEB, 0x27, 0xE2, 0xC0, 0xE0, 0x4B, 0x16, 0x30, 0x7E, 0x95, 0xB3, 0xEB, 0x1E, 0x84, 0xB9, 0x6D, 
0x67, 0x8C, 0x44, 0xA7, 0xEC, 0xC5, 0x2A, 0x0F, 0xB1, 0x2B, 0x77, 0xB5, 0x60, 0xA6, 0x98, 0x76, 
0xB8, 0xB0, 0x1D, 0xB9, 0xDB, 0x15, 0xA3, 0x2B, 0xB0, 0xE8, 0x34, 0x32, 0x73, 0x73, 0xE3, 0xFC, 
0xEE, 0x77, 0x1E, 0x0B, 0x11, 0x27, 0xEC, 0x20, 0x9E, 0x46, 0x58, 0x89, 0x28, 0x22, 0x22, 0xAD, 
0x42, 0xD3, 0x30, 0xE2, 0x8F, 0x81, 0xB6, 0xA2, 0xA0, 0xB8, 0x33, 0x1E, 0xEA, 0x7F, 0x23, 0x08, 
0x52, 0x1C, 0xB2, 0x50, 0xCE, 0xFE, 0x9E, 0x24, 0x6F, 0xBF, 0x15, 0x84, 0xF1, 0xA6, 0xFC, 0xA7, 
0xDA, 0x63, 0x90, 0x9D, 0x72, 0x6B, 0xB2, 0xE8, 0x0E, 0xDF, 0x79, 0x0B, 0x69, 0xF3, 0x70, 0x1C, 
0x6C, 0xAD, 0x23, 0x62, 0xEF, 0xB0, 0x28, 0x92, 0xA8, 0xC0, 0x39, 0xA3, 0x40, 0xED, 0x83, 0x36, 
0x2B, 0x12, 0xDD, 0xA0, 0x5D, 0x61, 0x41, 0xD5, 0xE5, 0xC7, 0x8E, 0x1D, 0xBD, 0x7C, 0xF7, 0x44, 
0x7B, 0x85, 0xB1, 0x60, 0x3E, 0xF9, 0x73, 0xD6, 0x5B, 0x30, 0x35, 0x47, 0xA0, 0xA4, 0x4C, 0xBD, 
0x85, 0x33, 0x10, 0x4E, 0xDF, 0xF5, 0xCF, 0xFA, 0x7B, 0xA2, 0xD7, 0xEF, 0x50, 0xA5, 0x72, 0xE1, 
0x6A, 0xB5, 0x68, 0xDF, 0x92, 0x9A, 0x1F, 0xCF, 0xA2, 0xAA, 0x2B, 0x75, 0x14, 0x0E, 0x48, 0x00, 
0x13, 0xF9, 0xC3, 0xFD, 0x8C, 0x42, 0xAB, 0x6C, 0x74, 0x0B, 0xC6, 0xBB, 0x8B, 0xE0, 0x0A, 0x8A, 
0xE4, 0x36, 0x8F, 0xEF, 0x55, 0x90, 0xB7, 0x65, 0x99, 0x4C, 0x09, 0x3E, 0x6D, 0x23, 0xA3, 0x0B, 
0x1C, 0xFC, 0x8A, 0xC7, 0xA5, 0x07, 0x75, 0x54, 0x66, 0x4B, 0x37, 0xDF, 0x5B, 0x1B, 0xE5, 0x4A
};
*/

// Creación de la instancia de ChaCha20
ChaCha20 chacha20;

void setup() {
  // Inicialización de la comunicación serial
  //while(!Serial);         //Descomentar para la placa raspberry pi pico
  Serial.begin(115200);

  uint8_t decryptedText[plainTextSize];

  // Desencriptar
  chacha20.chacha20_decrypt(key, nonce, counter, cipherText, plainTextSize, decryptedText);

  /*
  Serial.println("Cipher Text (Chacha20):");
  for (int i = 0; i < plainTextSize; i++) {
    if (cipherText[i] < 0x10) {
      Serial.print("0");
    }
    Serial.print(cipherText[i], HEX);
    if ((i + 1) % 16 == 0) {
      Serial.println();
    }
  }
  Serial.println();

  Serial.println("Decrypted Text (Chacha20):");
  for (int i = 0; i < plainTextSize; i++) {
    if (decryptedText[i] < 0x10) {
      Serial.print("0");
    }
    Serial.print(decryptedText[i], HEX);
    if ((i + 1) % 16 == 0) {
      Serial.println();
    }
  }
  Serial.println();
  */
}

void loop() {
}


